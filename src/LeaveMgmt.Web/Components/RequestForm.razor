@inject LeaveTypeService LeaveTypes
@inject LeaveRequestService Requests
@inject ISnackbar Snackbar

<EditForm Model="_vm" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <MudSelect T="Guid" @bind-Value="_vm.LeaveTypeId" Label="Leave Type" Required="true">
        @if (_types is null)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
        }
        else
        {
            @foreach (var t in _types)
            {
                <MudSelectItem Value="t.Id">@t.Name</MudSelectItem>
            }
        }
    </MudSelect>

    <MudTextField @bind-Value="_vm.Reason" Label="Reason" Lines="3" />

    <MudStack Row="true" Spacing="2" Class="mt-2">
        <MudTextField @bind-Value="_vm.StartDate" Label="Start" InputType="InputType.Date" Required="true" />
        <MudTextField @bind-Value="_vm.EndDate" Label="End" InputType="InputType.Date" Required="true" />
    </MudStack>

    @if (_submitting)
    {
        <MudProgressLinear Indeterminate="true" Class="mt-2" />
    }
</EditForm>

@code{
    private SubmitLeaveRequest _vm = new();
    private bool _submitting;
    private List<LeaveTypeDto>? _types;

    protected override async Task OnInitializedAsync() => _types = await LeaveTypes.GetAsync();

    public Task SetDateRange(DateOnly? start, DateOnly? end)
    {
        if (start.HasValue) _vm.StartDate = start.Value.ToDateTime(TimeOnly.MinValue);
        if (end.HasValue) _vm.EndDate = end.Value.ToDateTime(TimeOnly.MinValue);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task SubmitAsync()
    {
        try
        {
            _submitting = true;
            var result = await Requests.SubmitAsync(_vm);
            if (!result.Success) Snackbar.Add(result.Error ?? "Failed to submit request.", Severity.Error);
            else Snackbar.Add("Leave request submitted.", Severity.Success);
        }
        finally { _submitting = false; }
    }
}
