@inject LeaveRequestService Requests
@inject ISnackbar Snackbar

<MudTable Items="_items" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Outlined" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Employee</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Employee">@context.EmployeeName</MudTd>
        <MudTd DataLabel="Type">@context.LeaveTypeName</MudTd>
        <MudTd DataLabel="Start">@context.StartDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="End">@context.EndDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Status">
            <MudChip T="string" Color="@StatusColor(context.Status)" Variant="Variant.Filled">@context.Status</MudChip>
        </MudTd>
        <MudTd>
            @if (ForManager && context.Status == "Pending")
            {
                <MudButton Size="Size.Small" Color="Color.Success" OnClick="@(()=>Approve(context.Id))">Approve</MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" Class="ml-2" OnClick="@(()=>Reject(context.Id))">Reject</MudButton>
            }
            else if (!ForManager && context.Status == "Pending")
            {
                <MudButton Size="Size.Small" Color="Color.Warning" OnClick="@(()=>Retract(context.Id))">Retract</MudButton>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No requests.</MudText>
    </NoRecordsContent>
</MudTable>

@code{
    [Parameter] public bool ForManager { get; set; }

    private string Title => ForManager ? "Pending Approvals" : "My Requests";
    private List<LeaveRequestListItem> _items = new();

    protected override async Task OnInitializedAsync() => await Reload();

    private async Task Reload()
    {
        // Using your available GET in Swagger: /api/leave-requests/by-employee
        _items = await Requests.GetByEmployeeAsync();
        StateHasChanged();
    }

    private Color StatusColor(string status) => status switch
    {
        "Approved" => Color.Success,
        "Rejected" => Color.Error,
        "Pending"  => Color.Warning,
        _ => Color.Default
    };

    private async Task Approve(Guid id)
    {
        var res = await Requests.ApproveAsync(new ApproveRequest { Id = id });
        if (!res.Success) Snackbar.Add(res.Error ?? "Approve failed.", Severity.Error);
        await Reload();
    }

    private async Task Reject(Guid id)
    {
        var res = await Requests.RejectAsync(new RejectRequest { Id = id });
        if (!res.Success) Snackbar.Add(res.Error ?? "Reject failed.", Severity.Error);
        await Reload();
    }

    private async Task Retract(Guid id)
    {
        var res = await Requests.RetractAsync(new RetractRequest { Id = id });
        if (!res.Success) Snackbar.Add(res.Error ?? "Retract failed.", Severity.Error);
        await Reload();
    }
}
