@page "/request-leave"
@using LeaveMgmt.Website.Models
@using LeaveMgmt.Website.Services
@using LeaveMgmt.Website.Helpers
@inject ILeaveRequestService LeaveRequestsService
@inject ILeaveTypeService LeaveTypesService
@inject NavigationManager Nav
@inject IHolidayService HolidayService
<h3>Request Leave</h3>

<div class="row">
    <div class="col-md-6">
        <!-- Leave Type -->
        <div class="mb-3">
            <label class="form-label">Leave Type</label>
            <select class="form-select" @bind="SelectedLeaveTypeId">
                @foreach (var lt in LeaveTypes)
                {
                    <option value="@lt.Id">@lt.Name</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Leave From</label>
            <input type="date" class="form-control"
                   @bind="FromDate"
                   @bind:after="RecalculateDays"
                   min="@DateTime.Today.ToString("yyyy-MM-dd")" />
        </div>

        <div class="mb-3">
            <label class="form-label">Leave To</label>
            <input type="date" class="form-control"
                   @bind="ToDate"
                   @bind:after="RecalculateDays"
                   min="@FromDate.ToString("yyyy-MM-dd")" />
        </div>

        <!-- Number of Days -->
        <div class="mb-3">
            <label class="form-label">Number of Days</label>
            <input type="text" class="form-control" readonly value="@NumberOfDays" />
        </div>

        <button class="btn btn-primary" @onclick="Submit">Submit</button>
    </div>

    <!-- Calendar -->
    <div class="col-md-6">
        <h5>Calendar</h5>
        <div class="calendar">
            @foreach (var month in CalendarMonths)
            {
                <div class="calendar-month mb-3">
                    <h6>@month.Key.ToString("MMMM yyyy")</h6>

                    <!-- Weekday headers -->
                    <div class="calendar-grid weekday-headers">
                        <div class="calendar-header">Mon</div>
                        <div class="calendar-header">Tue</div>
                        <div class="calendar-header">Wed</div>
                        <div class="calendar-header">Thu</div>
                        <div class="calendar-header">Fri</div>
                        <div class="calendar-header weekend">Sat</div>
                        <div class="calendar-header weekend">Sun</div>
                    </div>

                    <div class="calendar-grid">
                        @foreach (var day in month.Value)
                        {
                            if (day == DateTime.MinValue)
                            {
                                <div class="calendar-cell empty"></div>
                            }
                            else
                            {
                                var inRange = day >= FromDate && day <= ToDate;
                                var isHoliday = Holidays.Any(h => h.Date.Date == day.Date);
                                var isWeekend = day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;

                                var css = inRange
                                ? "bg-primary text-white"
                                : (isWeekend || isHoliday) ? "holiday-day"
                                : "bg-light";

                                <div class="calendar-cell @css">@day.Day</div>
                            }
                        }
                    </div>

                </div>
            }
        </div>
    </div>
</div>

@code {
    private Guid SelectedLeaveTypeId = Guid.Parse("C34DE22D-DBEA-40AC-84C4-F1B5A4F335C3"); // default Annual
    private DateTime FromDate = DateTime.Today;
    private DateTime ToDate = DateTime.Today;
    private int NumberOfDays;
    private bool IsSubmitting;
    private List<LeaveType> LeaveTypes = new List<LeaveType>();
    private Dictionary<DateTime, List<DateTime>> CalendarMonths = new();
    private List<Holiday> Holidays = new();


    protected override async Task OnInitializedAsync()
    {
        BuildCalendar();
        RecalculateDays();
        LeaveTypes = await LeaveTypesService.GetAsync();
        Holidays = await HolidayService.GetAsync(DateTime.Today.Year);
    }

    private void BuildCalendar()
    {
        CalendarMonths.Clear();

        if (ToDate < FromDate)
            return;

        var current = new DateTime(FromDate.Year, FromDate.Month, 1);

        while (current <= ToDate)
        {
            var daysInMonth = DateTime.DaysInMonth(current.Year, current.Month);
            var firstDay = new DateTime(current.Year, current.Month, 1);

            var days = new List<DateTime>();

            // Pad empty slots so the 1st lines up correctly
            int offset = ((int)firstDay.DayOfWeek + 6) % 7;
            // Shift: makes Monday = 0, Sunday = 6
            for (int i = 0; i < offset; i++)
                days.Add(DateTime.MinValue); // placeholder

            // Add actual days
            for (int d = 1; d <= daysInMonth; d++)
                days.Add(new DateTime(current.Year, current.Month, d));

            CalendarMonths[current] = days;
            current = current.AddMonths(1);
        }
    }


    private async Task RecalculateDays()
    {
        if (ToDate < FromDate)
        {
            NumberOfDays = 0;
            CalendarMonths.Clear();
            return;
        }

        NumberOfDays = await Helpers.CalculateWorkingDaysAsync(FromDate, ToDate, HolidayService);

        BuildCalendar();
    }

    private async Task Submit()
    {
        if (NumberOfDays <= 0)
            return;

        IsSubmitting = true;

        var dto = new SubmitLeaveRequest
        {
            LeaveTypeId = SelectedLeaveTypeId,
            StartDate = DateOnly.FromDateTime(FromDate),
            EndDate = DateOnly.FromDateTime(ToDate),
            Days = NumberOfDays,
			Reason = LeaveTypes.FirstOrDefault(lt => lt.Id == SelectedLeaveTypeId)?.Name ?? "N/A"
        };

        var result = await LeaveRequestsService.SubmitAsync(dto);

        IsSubmitting = false;

        if (result.Success)
        {
            // redirect back to dashboard
            Nav.NavigateTo("/dashboard", forceLoad: true);
        }
        else
        {
            // TODO: show error to user
            Console.WriteLine("Submit failed: " + result.Error);
        }
    }


}
